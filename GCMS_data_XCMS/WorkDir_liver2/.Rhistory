#### plate 4 ####
#convert to lower case
plate4$cell<-tolower(plate4$cell)
plate4a<-merge(plate4, key4, by.x='cell', by.y='plate_key')
View(plate4a)
#get mean of sample duplicate values
plate4.mean<-ddply(plate4a, .(sample_name), function(x) mean(x$pg.ml))
#merge df with means with original plate key
plate4b<-merge(key4, plate4.mean, by.x='sample_name', by.y='sample_name')
View(plate4b)
#remove duplicate rows
plate4c<-plate4b[!duplicated(plate4b$sample_name),]
plate4c$plate<-'plate4'
View(plate4c)
#### plate 5 ####
#convert to lower case
plate5$cell<-tolower(plate5$cell)
plate5a<-merge(plate5, key5, by.x='cell', by.y='plate_key')
View(plate5a)
#get mean of sample duplicate values
plate5.mean<-ddply(plate5a, .(sample_name), function(x) mean(x$cort.pg.ml))
#merge df with means with original plate key
plate5b<-merge(key5, plate5.mean, by.x='sample_name', by.y='sample_name')
View(plate5b)
#remove duplicate rows
plate5c<-plate5b[!duplicated(plate5b$sample_name),]
plate5c$plate<-'plate5'
View(plate5c)
#### combine dataframes from each plate into 1 df ####
# convert numeric to factor for experiment column
plate2c$experiment<-as.factor(as.character(plate2c$experiment))
plate3c$experiment<-as.factor(as.character(plate3c$experiment))
plate4c$experiment<-as.factor(as.character(plate4c$experiment))
plate5c$experiment<-as.factor(as.character(plate5c$experiment))
#combine all plates into 1 df
cort_all<-rbind(plate1c, plate2c, plate3c, plate4c, plate5c)
View(cort_all)
# sort by sample number
cort_all_sort<-cort_all[order(cort_all$sample_no),]
#sum samples with multiple cort cells
c49<-(1.284533e+03+2.092193e+01)
c54<-(5.855812e+01+4.860801e+00)
s26<-(2.235718e+02+6.634500e+00)
s15<-(30.35141825+1.357286e+02)
#add1<-c(as.factor(as.character("exp4_C49base")),as.factor(as.character("a11g10")),as.factor(as.character("4")), as.factor(as.character("1")), "C49", as.numeric(c49))
cort_all_sort$sample_name<-as.factor(as.character(cort_all_sort$sample_name))
#cort_all_sort1<-rbind(cort_all_sort, add1)
write.csv(cort_all_sort, "cort_out.csv")
cort_out4 <- read.csv("~/Dropbox/amphib_metabolomics/PIP/data/CORT/final/cort_out4.csv")
View(cort_out4)
scort1<-cort_out4
scort1$experiment<-as.factor(as.character(scort1$experiment))
summary(scort1)
anova1<-lm(V1~experiment, data=subset(scort1, time=="1"))
summary(anova1)
anova2<-lm(V1~experiment, data=subset(scort1, time=="2"))
summary(anova2)
boxplot(V1~experiment, data=subset(scort1, time=="2"), main="Cort End")
boxplot(V1~experiment, data=subset(scort1, time=="1"), main= "Cort Beginning")
#create dataframe separate for initial and final time periods
scort1.base<-scort1[scort1$time=="1",]
View(scort1.base)
scort1.end<-scort1[scort1$time=="2",]
View(scort1.end)
#merge based on experiment number and sample name
scort2<-merge(scort1.base, scort1.end, by=c("sample_no", "experiment"))
summary(scort2)
View(scort2)
dim(scort2)
#subtract final measurement from initial cort measurement
scort2$cort.diff<-scort2$V1.y-scort2$V1.x
anova3<-lm(cort.diff~experiment, data=scort2)
summary(anova3)
boxplot(cort.diff~experiment, data=scort2, main="Cort difference")
#create dataframe separate for initial and final time periods
scort3.base<-scort3[scort3$time=="1",]
View(scort3.base)
scort3.end<-scort3[scort3$time=="2",]
View(scort3.end)
scort4<-merge(scort3.base, scort3.end, by=c("sample_no", "experiment"))
#cort4<-merge(cort3, sample_list, by=c("sample_no", "experiment"))
scort4$cort.diff<-scort4$V1.y-scort4$V1.x
View(scort4)
#anova for treatment effect on cort difference
m3<-lm(cort.diff~treatment.x, data=scort4)
summary(m3)
boxplot(cort.diff~treatment.x, data=scort4, xlab="treatment.x", names=c("control","pesticide","predator","pesticide+predator"), ylab="Cort pg/mL", main="difference measurement")
#create dataframe separate for initial and final time periods
scort3.base<-scort3[scort3$time=="1",]
View(scort3.base)
scort3.end<-scort3[scort3$time=="2",]
View(scort3.end)
scort4<-merge(scort3.base, scort3.end, by=c("sample_no", "experiment"))
#cort4<-merge(cort3, sample_list, by=c("sample_no", "experiment"))
scort4$cort.diff<-scort4$V1.y-scort4$V1.x
View(scort4)
#anova for treatment effect on cort difference
m3<-lm(cort.diff~treatment.x, data=scort4)
summary(m3)
boxplot(cort.diff~treatment.x, data=scort4, xlab="treatment.x", names=c("control","pesticide","predator","pesticide+predator"), ylab="Cort pg/mL", main="difference measurement")
scort3.base<-scort3[scort3$time=="1",]
scort3<-merge(scort1, sample_list, by=c("sample_no", "experiment"))
View(scort3)
cort_out4 <- read.csv("~/Dropbox/amphib_metabolomics/PIP/data/CORT/final/cort_out4.csv")
View(cort_out4)
scort1<-cort_out4
scort1$experiment<-as.factor(as.character(scort1$experiment))
summary(scort1)
anova1<-lm(V1~experiment, data=subset(scort1, time=="1"))
summary(anova1)
anova2<-lm(V1~experiment, data=subset(scort1, time=="2"))
summary(anova2)
boxplot(V1~experiment, data=subset(scort1, time=="2"), main="Cort End")
boxplot(V1~experiment, data=subset(scort1, time=="1"), main= "Cort Beginning")
#create dataframe separate for initial and final time periods
scort1.base<-scort1[scort1$time=="1",]
View(scort1.base)
scort1.end<-scort1[scort1$time=="2",]
View(scort1.end)
#merge based on experiment number and sample name
scort2<-merge(scort1.base, scort1.end, by=c("sample_no", "experiment"))
summary(scort2)
View(scort2)
dim(scort2)
#subtract final measurement from initial cort measurement
scort2$cort.diff<-scort2$V1.y-scort2$V1.x
anova3<-lm(cort.diff~experiment, data=scort2)
summary(anova3)
boxplot(cort.diff~experiment, data=scort2, main="Cort difference")
sample_list <- read.csv("~/Dropbox/amphib_metabolomics/PIP/data/sample_list.csv")
scort3<-merge(scort1, sample_list, by=c("sample_no", "experiment"))
View(scort3)
scort3$treatment<-as.factor(as.character(scort3$treatment))
scort3$time<-as.factor(as.character(scort3$time))
#anovas for effect of treatment on cort level at beginning and end
m1<-lm(V1~treatment, data=subset(scort3, time=="1"))
summary(m1)
m2<-lm(V1~treatment, data=subset(scort3, time=="2"))
summary(m2)
boxplot(V1~treatment, data=subset(scort3, time=="2"), xlab="treatment", names=c("control","pesticide","predator","pesticide+predator"), ylab="Cort pg/mL", main="End measurement")
boxplot(V1~treatment, data=subset(scort3, time=="1"), xlab="treatment", names=c("control","pesticide","predator","pesticide+predator"), ylab="Cort pg/mL", main="Base measurement")
#create dataframe separate for initial and final time periods
scort3.base<-scort3[scort3$time=="1",]
View(scort3.base)
scort3.end<-scort3[scort3$time=="2",]
View(scort3.end)
scort4<-merge(scort3.base, scort3.end, by=c("sample_no", "experiment"))
#cort4<-merge(cort3, sample_list, by=c("sample_no", "experiment"))
scort4$cort.diff<-scort4$V1.y-scort4$V1.x
View(scort4)
#anova for treatment effect on cort difference
m3<-lm(cort.diff~treatment.x, data=scort4)
summary(m3)
boxplot(cort.diff~treatment.x, data=scort4, xlab="treatment.x", names=c("control","pesticide","predator","pesticide+predator"), ylab="Cort pg/mL", main="difference measurement")
setwd("~/git/PIP/cdfs")
cdf.path<-("~/git/PIP/cdfs")
list.files(cdf.path)
cdffiles <- list.files(cdf.path, recursive = TRUE, full.names = TRUE)
cdffiles
set2 <- xcmsSet(cdffiles)
library(xcms)
set2 <- xcmsSet(cdffiles)
set2 <- xcmsSet(cdffiles)
cdffiles <- list.files(cdf.path, recursive = TRUE, full.names = TRUE)
set2 <- xcmsSet(cdffiles)
cdf.path<-("~/git/PIP/cdfs")
list.files(cdf.path)
cdf.path<-("~/git/PIP/cdfs")
cdffiles <- list.files(cdf.path, recursive = TRUE, full.names = TRUE)
set2 <- xcmsSet(cdffiles)
XCMSdiff_at_tof_r4 <- read.csv("~/Dropbox/amphib_metabolomics/DATA/toad_gt_stage22_round4/xcms/at_r4_tof_all_fold/MUMA_allpeaks061615/XCMSdiff_at_tof_r4.csv")
atall<-XCMSdiff_at_tof_r4
View(atall)
XCMS.diffreport4R <- read.csv("~/git/PIP/GCMS_data_XCMS/XCMS.diffreport4R.csv")
View(XCMS.diffreport4R)
liver1<-XCMS.diffreport4R
names(liver1)
n<-liver1$rtmed
liver1_t<-as.data.frame(t(liver1[,-1]))
colnames(liver1_t)<-n
View(liver1_t)
liver1_t$Samples <- factor(colnames(liver1)[-1])
liver1_t$Samples
atall_t$Class<-c("3","3","1","1","1","1","3","3","3","3","3","3","3","3","1","1","1","1","1","1","2","2","2","2","2","2","2","4","4","4","4","4","4",
"4","4","2","4","4","2","2")
liver1_t$Class<-c("3","3","1","1","1","1","3","3","3","3","3","3","3","3","1","1","1","1","1","1","2","2","2","2","2","2","2","4","4","4","4","4","4",
"4","4","2","4","4","2","2")
head(summary(liver1_t))
liver1_t$Class
liver1_t<-liver1_t[sapply(liver1_t, function(liver1_t)!any(is.na(liver1_t)))]#
setwd("~/git/PIP/GCMS_data_XCMS")
write.csv(liver1_t, file="liver1_t_out.csv")
work.dir(dir.name="WorkDir_liver1")
work.dir(dir.name="WorkDir_liver1")
library(muma)
library(e1071)
work.dir(dir.name="WorkDir_liver1")
head(summary(liver1_t))
liver1_t[,c(ncol(liver1_t),1:(ncol(liver1_t)-1))]
View(liver1_t)
dim(liver1_t)
liver2_t<-liver1_t[,c(1587, 2:1586)]
View(liver2_t)
dim(liver2_t)
setwd("~/git/PIP/GCMS_data_XCMS")
write.csv(liver2_t, file="liver2_t_out.csv")
write.csv(liver2_t, file="liver2_t_out.csv")
work.dir(dir.name="WorkDir_liver1")
explore.data(file="liver2_t_out.csv", scaling="a", scal=TRUE, normalize=TRUE, imputation=FALSE, imput="ImputType")
explore.data(file="liver2_t_out.csv", scaling="a", scal=TRUE, normalize=TRUE, imputation=FALSE, imput="ImputType")
work.dir(dir.name="WorkDir_liver1")
explore.data(file="liver2_t_out.csv", scaling="a", scal=TRUE, normalize=TRUE, imputation=FALSE, imput="ImputType")
setwd("~/git/PIP/GCMS_data_XCMS")
work.dir(dir.name="WorkDir_liver1")
explore.data(file="liver2_t_out.csv", scaling="a", scal=TRUE, normalize=TRUE, imputation=FALSE, imput="ImputType")
par( mfrow = c( 1, 2 ) )
Plot.pca(pcx=1, pcy=2, scaling="a", test.outlier=TRUE)
explore.data(file="atall_t_out.csv", scaling="p", scal=TRUE, normalize=TRUE, imputation=FALSE, imput="ImputType")
explore.data(file="liver2_t_out.csv", scaling="p", scal=TRUE, normalize=TRUE, imputation=FALSE, imput="ImputType")
plsda(scaling="a")
Plot.plsda(pcx=1, pcy=2, scaling="a")
Plot.plsda(pcx=2, pcy=3, scaling="a")
plsda(scaling="p")
Plot.plsda(pcx=1, pcy=2, scaling="a")
Plot.plsda(pcx=2, pcy=3, scaling="a")
?plsda
setwd("~/git/PIP/GCMS_data_XCMS")
work.dir(dir.name="WorkDir_liver2")
explore.data(file="liver3_t_out.csv", scaling="a", scal=TRUE, normalize=TRUE, imputation=FALSE, imput="ImputType")
Plot.pca(pcx=1, pcy=2, scaling="a", test.outlier=TRUE)
explore.data(file="liver3_t_out.csv", scaling="p", scal=TRUE, normalize=TRUE, imputation=FALSE, imput="ImputType")
explore.data(file="liver3_t_out.csv", scaling="p", scal=TRUE, normalize=TRUE, imputation=FALSE, imput="ImputType")
plsda(scaling="p")
Plot.plsda(pcx=2, pcy=3, scaling="p")
plsda(scaling="a")
Plot.plsda(pcx=1, pcy=2, scaling="a")
?Plot.plsda
class <- read.csv("~/git/PIP/GCMS_data_XCMS/WorkDir_liver1/Preprocessing_Data_a/class.csv")
View(class)
ProcessedTable <- read.csv("~/git/PIP/GCMS_data_XCMS/WorkDir_liver1/Preprocessing_Data_a/ProcessedTable.csv")
View(ProcessedTable)
allliver<-cbind(class$V1, ProcessedTable)
View(allliver)
allliver(order(class$V1))
allliver<-allliver[order(class$V1)]
View(allliver)
allliver<-cbind(class$V1, ProcessedTable)
allliver2<-allliver[order(class$V1),]
View(alliver2)
View(allliver2)
liver1_2<-allliver2[,-21:-40]
View(liver1_2)
liver1_2<-allliver2[-21:-40,]
View(liver1_2)
set.seed(34)
gamma<-c(0.1,1)
tuned <- tune.svm(as.factor(Class)~., data = data2, gamma = gamma, cost = 0.1, tunecontrol = tune.control(cross = 3), scale=FALSE)
liver1_2$Class<-liver1_2$`class$V1`
liver1_2$Class
liver1_2$Class<-as.factor(liver1_2$`class$V1`)
set.seed(34)
gamma<-c(0.1,1)
tuned <- tune.svm(as.factor(Class)~., data = liver1_2, gamma = gamma, cost = 0.1, tunecontrol = tune.control(cross = 3), scale=FALSE)
tuned
cost.vector<-c(1e-10,1e-5,1e-1,1e1,1e5,1e10)
gamma.vector<-c(1e-10,1e-5,1e-1,1e1,1e5,1e10)
accuracy.vector<-NULL
m9<-matrix(NA, length(cost.vector), length(gamma.vector))
for (k in seq_along(cost.vector)){
for (j in seq_along(gamma.vector)){
for (i in 1:250){
model.radial.all <- svm(as.factor(Class)~., data=liver1_2, kernal="radial", gamma=gamma.vector[j], cost=cost.vector[k], scale=FALSE, cross=3)
accuracy.vector[i]<-model.radial.all$tot.accuracy
}
m9[k, j]<-mean(accuracy.vector)
}
}
m9
for (k in seq_along(cost.vector)){
for (j in seq_along(gamma.vector)){
for (i in 1:10){
model.radial.all <- svm(as.factor(Class)~., data=liver1_2, kernal="radial", gamma=gamma.vector[j], cost=cost.vector[k], scale=FALSE, cross=3)
accuracy.vector[i]<-model.radial.all$tot.accuracy
}
m9[k, j]<-mean(accuracy.vector)
}
}
m9
#### other R implementation of RFE for SVM ####
svmrfeFeatureRanking = function(x,y){
n = ncol(x)
survivingFeaturesIndexes = seq(1:n)
featureRankedList = vector(length=n)
rankedFeatureIndex = n
while(length(survivingFeaturesIndexes)>0){
#train the support vector machine
svmModel = svm(x[, survivingFeaturesIndexes], y, cost = 6.4e9, gamma=1.0e-10, cachesize=500,
scale=F, type="C-classification", kernel="radial" )
#compute the weight vector
w = t(svmModel$coefs)%*%svmModel$SV
#compute ranking criteria
rankingCriteria = w * w
#rank the features
ranking = sort(rankingCriteria, index.return = TRUE)$ix
#update feature ranked list
featureRankedList[rankedFeatureIndex] = survivingFeaturesIndexes[ranking[1]]
rankedFeatureIndex = rankedFeatureIndex - 1
#eliminate the feature with smallest ranking criterion
(survivingFeaturesIndexes = survivingFeaturesIndexes[-ranking[1]])
}
return (featureRankedList)
}
liver1_2$Class
X<-liver1_2[,-2]
X
View(X)
X<-liver1_2[,-1:-2]
View(X)
X<-liver1_2[,-1:-2]
Y<-liver1_2$Class
featureRankedList <-svmrfeFeatureRanking(X,Y)
summary(X)
dim(X)
X<-X[,-1585]
Y<-liver1_2$Class
featureRankedList <-svmrfeFeatureRanking(X,Y)
featureRankedList
svmModel = svm(X[, featureRankedList[1:200]], Y, cost = 1e10, gamma=1.0e-10, kernel="radial", cross=3 )
svmModel
summary(svmModel)
print(svmModel)
svmModel = svm(X[, featureRankedList[1:400]], Y, cost = 1e10, gamma=1.0e-10, kernel="radial", cross=3 )
svmModel
summary(svmModel)
svmModel = svm(X[, featureRankedList[1:500]], Y, cost = 1e10, gamma=1.0e-10, kernel="radial", cross=3 )
svmModel
summary(svmModel)
svmModel = svm(X[, featureRankedList[1:100]], Y, cost = 1e10, gamma=1.0e-10, kernel="radial", cross=3 )
svmModel
summary(svmModel)
length(X)
no.features<-seq(1,1500,by=100)
out.acc<-NULL
for (j in seq_along(no.features)){
for (i in 1:250){
svmModel3 = svm(X[, featureRankedList[1:no.features[j]]], Y, cost = 1e10, kernel="radial", cross=3 )
accuracy.vector[i]<-svmModel3$tot.accuracy
}
out.acc[j]<-mean(accuracy.vector)
}
out.acc
acc4merge<-cbind(no.features, out.acc)
View(acc4merge)
plot(acc4merge$no.features, acc4merge$out.acc)
acc4merge$no.features
acc4merge<-as.data.frame(cbind(no.features, out.acc))
View(acc4merge)
plot(acc4merge$no.features, acc4merge$out.acc)
plot(acc4merge$no.features, acc4merge$out.acc, ylab="% Accuracy", xlab="Number of bins")
no.features<-seq(1,200,by=20)
out.acc<-NULL
for (j in seq_along(no.features)){
for (i in 1:250){
svmModel3 = svm(X[, featureRankedList[1:no.features[j]]], Y, cost = 1e10, kernel="radial", cross=3 )
accuracy.vector[i]<-svmModel3$tot.accuracy
}
out.acc[j]<-mean(accuracy.vector)
}
out.acc
acc4merge<-as.data.frame(cbind(no.features, out.acc))
View(acc4merge)
plot(acc4merge$no.features, acc4merge$out.acc, ylab="% Accuracy", xlab="Number of bins")
no.features<-seq(1,200,by=10)
out.acc<-NULL
for (j in seq_along(no.features)){
for (i in 1:250){
svmModel3 = svm(X[, featureRankedList[1:no.features[j]]], Y, cost = 1e10, kernel="radial", cross=3 )
accuracy.vector[i]<-svmModel3$tot.accuracy
}
out.acc[j]<-mean(accuracy.vector)
}
out.acc
acc4merge<-as.data.frame(cbind(no.features, out.acc))
View(acc4merge)
plot(acc4merge$no.features, acc4merge$out.acc, ylab="% Accuracy", xlab="Number of bins")
featureRankedList
names(featurerankedlist)
names(featureRankedList)
View(featureRankedList)
names(liver1_2)
View(liver1_2)
liver1_2t<-t(liver1_2)
View(liver1_2t)
length(featureRankedList)
end(liver1_2t)
type(featureRankedList)
class(featureRankedList)
str(featureRankedList)
featureRankedList[c(1,2)]<-c("No","No")
View(featureRankedList)
featureRankedList <-svmrfeFeatureRanking(X,Y)
featureRankedList4join <- insert(featureRankedList, ats=1, values=rep(NA,2))
library(R.utils)
install.packages("R.utils")
install.packages("R.utils")
library(R.utils)
featureRankedList4join <- insert(featureRankedList, ats=1, values=rep(NA,2))
featureRankedList4join
liver1_2twRFE<-cbind(featureRankedList4join, liver1_2t)
featureRankedList4join2 <- insert(featureRankedList4join, ats=1587, values=(NA))
View(featureRankedList4join2)
dim(liver1_2t)
liver1_2twRFE<-cbind(featureRankedList4join2, liver1_2t)
View(liver1_2twRFE)
write.csv(liver1_2twRFE, "RFE_ctrlvspest.csv")
View(allliver2)
liver1_3<-allliver2[which(allliver2$'class$V1'=='1' OR allliver2$'class$V1'=='1'), ]
liver1_3<-allliver2[which(allliver2$'class$V1'=='1' | allliver2$'class$V1'=='1'), ]
View(liver1_3)
liver1_3<-allliver2[which(allliver2$'class$V1'=='1' | allliver2$'class$V1'=='3'), ]
View(liver1_3)
liver1_3$Class<-as.factor(liver1_3$`class$V1`)
set.seed(34)
gamma<-c(0.1,1)
tuned <- tune.svm(as.factor(Class)~., data = liver1_3, gamma = gamma, cost = 0.1, tunecontrol = tune.control(cross = 3), scale=FALSE)
tuned
#tuning across a larger range
cost.vector<-c(1e-10,1e-5,1e-1,1e1,1e5,1e10)
gamma.vector<-c(1e-10,1e-5,1e-1,1e1,1e5,1e10)
accuracy.vector<-NULL
m9<-matrix(NA, length(cost.vector), length(gamma.vector))
for (k in seq_along(cost.vector)){
for (j in seq_along(gamma.vector)){
for (i in 1:10){
model.radial.all <- svm(as.factor(Class)~., data=liver1_3, kernal="radial", gamma=gamma.vector[j], cost=cost.vector[k], scale=FALSE, cross=3)
accuracy.vector[i]<-model.radial.all$tot.accuracy
}
m9[k, j]<-mean(accuracy.vector)
}
}
m9
X<-liver1_3[,-1:-2]
X<-X[,-1585]
Y<-liver1_3$Class
featureRankedList <-svmrfeFeatureRanking(X,Y)
featureRankedList
svmModel = svm(X[, featureRankedList[1:100]], Y, cost = 1e10, gamma=1.0e-10, kernel="radial", cross=3 )
svmModel
summary(svmModel)
print(svmModel)
svmModel = svm(X[, featureRankedList[1:200]], Y, cost = 1e10, gamma=1.0e-10, kernel="radial", cross=3 )
svmModel
summary(svmModel)
print(svmModel)
no.features<-seq(1,1500,by=100)
out.acc<-NULL
for (j in seq_along(no.features)){
for (i in 1:250){
svmModel3 = svm(X[, featureRankedList[1:no.features[j]]], Y, cost = 1e10, kernel="radial", cross=3 )
accuracy.vector[i]<-svmModel3$tot.accuracy
}
out.acc[j]<-mean(accuracy.vector)
}
no.features<-seq(1,1500,by=100)
out.acc<-NULL
for (j in seq_along(no.features)){
for (i in 1:100){
svmModel3 = svm(X[, featureRankedList[1:no.features[j]]], Y, cost = 1e10, kernel="radial", cross=3 )
accuracy.vector[i]<-svmModel3$tot.accuracy
}
out.acc[j]<-mean(accuracy.vector)
}
no.features<-seq(1,1500,by=100)
out.acc<-NULL
for (j in seq_along(no.features)){
for (i in 1:10){
svmModel3 = svm(X[, featureRankedList[1:no.features[j]]], Y, cost = 1e10, kernel="radial", cross=3 )
accuracy.vector[i]<-svmModel3$tot.accuracy
}
out.acc[j]<-mean(accuracy.vector)
}
out.acc
acc4merge<-as.data.frame(cbind(no.features, out.acc))
View(acc4merge)
#plot of output
plot(acc4merge$no.features, acc4merge$out.acc, ylab="% Accuracy", xlab="Number of bins")
no.features<-seq(1,1500,by=100)
out.acc<-NULL
for (j in seq_along(no.features)){
for (i in 1:50){
svmModel3 = svm(X[, featureRankedList[1:no.features[j]]], Y, cost = 1e10, kernel="radial", cross=3 )
accuracy.vector[i]<-svmModel3$tot.accuracy
}
out.acc[j]<-mean(accuracy.vector)
}
out.acc
acc4merge<-as.data.frame(cbind(no.features, out.acc))
View(acc4merge)
#plot of output
plot(acc4merge$no.features, acc4merge$out.acc, ylab="% Accuracy", xlab="Number of bins")
no.features<-seq(1,1500,by=100)
out.acc<-NULL
for (j in seq_along(no.features)){
for (i in 1:250){
svmModel3 = svm(X[, featureRankedList[1:no.features[j]]], Y, cost = 1e10, kernel="radial", cross=3 )
accuracy.vector[i]<-svmModel3$tot.accuracy
}
out.acc[j]<-mean(accuracy.vector)
}
out.acc
acc4merge<-as.data.frame(cbind(no.features, out.acc))
View(acc4merge)
