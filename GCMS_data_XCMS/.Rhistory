# run for each scenario's hourly DF
A14_ddGT18<-dum_dd(thres, A14)
B14_ddGT18<-dum_dd(thres, B14)
C14_ddGT18<-dum_dd(thres, C14)
D14_ddGT18<-dum_dd(thres, D14)
# add scenario column
A14_ddGT18$scenario<-"A"
B14_ddGT18$scenario<-"B"
C14_ddGT18$scenario<-"C"
D14_ddGT18$scenario<-"D"
#combine
all_14_ddGT18<-rbind.data.frame(A14_ddGT18, B14_ddGT18, C14_ddGT18, D14_ddGT18)
# Chunk 29: A14 GT 22 hist
a2<-ggplot(A14_ddGT18, aes(x=temp_1)) + geom_histogram(aes(x=temp_1, y=100 * (..count..)/sum(..count..))) + xlim(0,1400) + ylim(0,30) + theme_classic() + theme(legend.position="none", axis.text=element_text(size=text1),
title=element_text(size=8),axis.title=element_text(size=text1)) + labs(x="Cumulative degree days (>22°C)", y="Percent", title="Columbia 2017, \nCWR Current")
# Chunk 30: B14 GT 22 hist
b2<-ggplot(B14_ddGT18, aes(x=temp_1)) + geom_histogram(aes(x=temp_1, y=100 * (..count..)/sum(..count..))) + xlim(0,1400) + ylim(0,30) + theme_classic() + theme(legend.position="none", axis.text=element_text(size=text1),
title=element_text(size=8),axis.title=element_text(size=text1)) + labs(x="Cumulative degree days (>22°C)", y="Percent", title="Columbia 2017, \nNo CWR")
# Chunk 31: C14 GT 22 hist
c2<-ggplot(C14_ddGT18, aes(x=temp_1)) + geom_histogram(aes(x=temp_1, y=100 * (..count..)/sum(..count..))) + xlim(0,1400) + ylim(0,30) + theme_classic() + theme(legend.position="none", axis.text=element_text(size=text1),
title=element_text(size=8),axis.title=element_text(size=text1)) + labs(x="Cumulative degree days (>22°C)", y="Percent", title="Columbia 2040 (2017), \nCWR Current")
# Chunk 32: D14 GT 22 hist
d2<-ggplot(D14_ddGT18, aes(x=temp_1)) + geom_histogram(aes(x=temp_1, y=100 * (..count..)/sum(..count..))) + xlim(0,1400) + ylim(0,30) + theme_classic() + theme(legend.position="none", axis.text=element_text(size=text1),
title=element_text(size=8),axis.title=element_text(size=text1)) + labs(x="Cumulative degree days (>22°C)", y="Percent", title="Columbia 2040 (2017), \nNo CWR")
# Chunk 33: plot DD hist together GT 22
plot_grid(a2, b2, c2, d2,
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2)
# Chunk 34: cum DD boxplot GT 22
all_14_ddGT18$scenario<-as.factor(all_14_ddGT18$scenario)
out3<-ggplot(all_14_ddGT18, aes(x=scenario, y=temp_1, group=scenario)) +
geom_boxplot() + ylim(0,800) +
labs( y="Cumulative degree days (>22°C)", title="Grande Ronde River Summer Steelhead") +
theme_classic()
out3 + theme(axis.text.x=element_text(color = "black", size=11, angle=30, vjust=.8, hjust=0.8), axis.title.x=element_blank(),) + scale_x_discrete(limits=c( "A", "B","C","D"), labels=c(
"Columbia 2017,\n CWR Current",
"Columbia 2017, \nNo CWRs",
"Columbia 2040 (2017), \nCWR Current",
"Columbia 2040 (2017), \nNo CWRs"))
# Chunk 35: DD lost table GT 22
DD_used_table<-aggregate(temp_1~scenario, data=all_14_ddGT18, quantile)
DD_used_table$scenario<-as.character(DD_used_table$scenario)
DD_used_table<-format(DD_used_table, digits = 0) # round
DD_used_table$scenario[DD_used_table$scenario == "A"] <- "Columbia 2017, CWR Current"
DD_used_table$scenario[DD_used_table$scenario == "B"] <- "Columbia 2017, No CWR"
DD_used_table$scenario[DD_used_table$scenario == "C"] <- "Columbia 2040 (2017), CWR Current"
DD_used_table$scenario[DD_used_table$scenario == "D"] <- "Columbia 2040 (2017), No CWR"
# create table with pretty format
kable(DD_used_table, col.names=c( "Scenario", "Minimum", "25% quantile","Median", "75% quantile", "Maximum"),row.names=FALSE, caption="Table 1. Cumulative degree days (>22°C) used across different HexSim thermalscapes summarized for Grande Ronde River Summer Steelhead.", digits=1)
# Chunk 36: calc DD GT 23 for each scenario
# function to calculate cumulative degree days above a certain degree
dum_dd<-function(threshold, DF){
DF_subset<-DF[which(DF$temp_1 >= threshold),]
dd_threshold<-aggregate(temp_1~ID, data=DF_subset, sum)
dd_threshold$temp_1<-dd_threshold$temp_1/24
return(dd_threshold)
}
# set threshold
thres<-23
# run for each scenario's hourly DF
A14_ddGT18<-dum_dd(thres, A14)
B14_ddGT18<-dum_dd(thres, B14)
C14_ddGT18<-dum_dd(thres, C14)
D14_ddGT18<-dum_dd(thres, D14)
# add scenario column
A14_ddGT18$scenario<-"A"
B14_ddGT18$scenario<-"B"
C14_ddGT18$scenario<-"C"
D14_ddGT18$scenario<-"D"
#combine
all_14_ddGT18<-rbind.data.frame(A14_ddGT18, B14_ddGT18, C14_ddGT18, D14_ddGT18)
# Chunk 37: A14 GT 23 hist
a2<-ggplot(A14_ddGT18, aes(x=temp_1)) + geom_histogram(aes(x=temp_1, y=100 * (..count..)/sum(..count..))) + xlim(0,1400) + ylim(0,30) + theme_classic() + theme(legend.position="none", axis.text=element_text(size=text1),
title=element_text(size=8),axis.title=element_text(size=text1)) + labs(x="Cumulative degree days (>23°C)", y="Percent", title="Columbia 2017, \nCWR Current")
# Chunk 38: B14 GT 23 hist
b2<-ggplot(B14_ddGT18, aes(x=temp_1)) + geom_histogram(aes(x=temp_1, y=100 * (..count..)/sum(..count..))) + xlim(0,1400) + ylim(0,30) + theme_classic() + theme(legend.position="none", axis.text=element_text(size=text1),
title=element_text(size=8),axis.title=element_text(size=text1)) + labs(x="Cumulative degree days (>23°C)", y="Percent", title="Columbia 2017, \nNo CWR")
# Chunk 39: C14 GT 23 hist
c2<-ggplot(C14_ddGT18, aes(x=temp_1)) + geom_histogram(aes(x=temp_1, y=100 * (..count..)/sum(..count..))) + xlim(0,1400) + ylim(0,30) + theme_classic() + theme(legend.position="none", axis.text=element_text(size=text1),
title=element_text(size=8),axis.title=element_text(size=text1)) + labs(x="Cumulative degree days (>23°C)", y="Percent", title="Columbia 2040 (2017), \nCWR Current")
# Chunk 40: D14 GT 23 hist
d2<-ggplot(D14_ddGT18, aes(x=temp_1)) + geom_histogram(aes(x=temp_1, y=100 * (..count..)/sum(..count..))) + xlim(0,1400) + ylim(0,30) + theme_classic() + theme(legend.position="none", axis.text=element_text(size=text1),
title=element_text(size=8),axis.title=element_text(size=text1)) + labs(x="Cumulative degree days (>23°C)", y="Percent", title="Columbia 2040 (2017), \nNo CWR")
# Chunk 41: plot DD hist together GT 23
plot_grid(a2, b2, c2, d2,
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2)
# Chunk 42: cum DD boxplot GT 23
all_14_ddGT18$scenario<-as.factor(all_14_ddGT18$scenario)
out3<-ggplot(all_14_ddGT18, aes(x=scenario, y=temp_1, group=scenario)) +
geom_boxplot() + ylim(0,800) +
labs( y="Cumulative degree days (>23°C)", title="Grande Ronde River Summer Steelhead") +
theme_classic()
out3 + theme(axis.text.x=element_text(color = "black", size=11, angle=30, vjust=.8, hjust=0.8), axis.title.x=element_blank(),) + scale_x_discrete(limits=c( "A", "B","C","D"), labels=c(
"Columbia 2017,\n CWR Current",
"Columbia 2017, \nNo CWRs",
"Columbia 2040 (2017), \nCWR Current",
"Columbia 2040 (2017), \nNo CWRs"))
# Chunk 43: DD lost table GT 23
DD_used_table<-aggregate(temp_1~scenario, data=all_14_ddGT18, quantile)
DD_used_table$scenario<-as.character(DD_used_table$scenario)
DD_used_table<-format(DD_used_table, digits = 0) # round
DD_used_table$scenario[DD_used_table$scenario == "A"] <- "Columbia 2017, CWR Current"
DD_used_table$scenario[DD_used_table$scenario == "B"] <- "Columbia 2017, No CWR"
DD_used_table$scenario[DD_used_table$scenario == "C"] <- "Columbia 2040 (2017), CWR Current"
DD_used_table$scenario[DD_used_table$scenario == "D"] <- "Columbia 2040 (2017), No CWR"
# create table with pretty format
kable(DD_used_table, col.names=c( "Scenario", "Minimum", "25% quantile","Median", "75% quantile", "Maximum"),row.names=FALSE, caption="Table 1. Cumulative degree days (>23°C) used across different HexSim thermalscapes summarized for Grande Ronde River Summer Steelhead.", digits=1)
# set threshold based on 75% quantile
thres<-252
a<-dim(dplyr::filter(all_14_ddGT18, temp_1 > thres & scenario =="A"))[1] / dim(dplyr::filter(all_14_ddGT18, scenario =="A"))[1]
b<-dim(dplyr::filter(all_14_ddGT18, temp_1 > thres & scenario =="B"))[1] / dim(dplyr::filter(all_14_ddGT18, scenario =="B"))[1]
c<-dim(dplyr::filter(all_14_ddGT18, temp_1 > thres & scenario =="C"))[1] / dim(dplyr::filter(all_14_ddGT18, scenario =="C"))[1]
d<-dim(dplyr::filter(all_14_ddGT18, temp_1 > thres & scenario =="D"))[1] / dim(dplyr::filter(all_14_ddGT18, scenario =="D"))[1]
out<-cbind(a*100,b*100,c*100,d*100)
# create table with pretty format
kable(out, col.names=c( "Columbia 2017, CWR Current", "Columbia 2017, No CWR", "Columbia 2040 (2017), CWR Current","Columbia 2040 (2017), No CWR"),row.names=FALSE, caption="Table 1. Percent of population with cumulative degree days (>22°C) above 135 across different HexSim thermalscapes summarized for Grande Ronde River summer steelhead.", digits=0)
# function to calculate cumulative degree days above a certain degree
dum_dd<-function(threshold, DF){
DF_subset<-DF[which(DF$temp_1 >= threshold),]
dd_threshold<-aggregate(temp_1~ID, data=DF_subset, sum)
dd_threshold$temp_1<-dd_threshold$temp_1/24
return(dd_threshold)
}
# set threshold
thres<-22
# run for each scenario's hourly DF
A14_ddGT18<-dum_dd(thres, A14)
B14_ddGT18<-dum_dd(thres, B14)
C14_ddGT18<-dum_dd(thres, C14)
D14_ddGT18<-dum_dd(thres, D14)
# add scenario column
A14_ddGT18$scenario<-"A"
B14_ddGT18$scenario<-"B"
C14_ddGT18$scenario<-"C"
D14_ddGT18$scenario<-"D"
#combine
all_14_ddGT18<-rbind.data.frame(A14_ddGT18, B14_ddGT18, C14_ddGT18, D14_ddGT18)
all_14_ddGT18$scenario<-as.factor(all_14_ddGT18$scenario)
out3<-ggplot(all_14_ddGT18, aes(x=scenario, y=temp_1, group=scenario)) +
geom_boxplot() + ylim(0,800) +
labs( y="Cumulative degree days (>22°C)", title="Grande Ronde River Summer Steelhead") +
theme_classic()
out3 + theme(axis.text.x=element_text(color = "black", size=11, angle=30, vjust=.8, hjust=0.8), axis.title.x=element_blank(),) + scale_x_discrete(limits=c( "A", "B","C","D"), labels=c(
"Columbia 2017,\n CWR Current",
"Columbia 2017, \nNo CWRs",
"Columbia 2040 (2017), \nCWR Current",
"Columbia 2040 (2017), \nNo CWRs"))
DD_used_table<-aggregate(temp_1~scenario, data=all_14_ddGT18, quantile)
DD_used_table$scenario<-as.character(DD_used_table$scenario)
DD_used_table<-format(DD_used_table, digits = 0) # round
DD_used_table$scenario[DD_used_table$scenario == "A"] <- "Columbia 2017, CWR Current"
DD_used_table$scenario[DD_used_table$scenario == "B"] <- "Columbia 2017, No CWR"
DD_used_table$scenario[DD_used_table$scenario == "C"] <- "Columbia 2040 (2017), CWR Current"
DD_used_table$scenario[DD_used_table$scenario == "D"] <- "Columbia 2040 (2017), No CWR"
# create table with pretty format
kable(DD_used_table, col.names=c( "Scenario", "Minimum", "25% quantile","Median", "75% quantile", "Maximum"),row.names=FALSE, caption="Table 1. Cumulative degree days (>22°C) used across different HexSim thermalscapes summarized for Grande Ronde River Summer Steelhead.", digits=1)
# set threshold based on 75% quantile
thres<-252
a<-dim(dplyr::filter(all_14_ddGT18, temp_1 > thres & scenario =="A"))[1] / dim(dplyr::filter(all_14_ddGT18, scenario =="A"))[1]
b<-dim(dplyr::filter(all_14_ddGT18, temp_1 > thres & scenario =="B"))[1] / dim(dplyr::filter(all_14_ddGT18, scenario =="B"))[1]
c<-dim(dplyr::filter(all_14_ddGT18, temp_1 > thres & scenario =="C"))[1] / dim(dplyr::filter(all_14_ddGT18, scenario =="C"))[1]
d<-dim(dplyr::filter(all_14_ddGT18, temp_1 > thres & scenario =="D"))[1] / dim(dplyr::filter(all_14_ddGT18, scenario =="D"))[1]
out<-cbind(a*100,b*100,c*100,d*100)
# create table with pretty format
kable(out, col.names=c( "Columbia 2017, CWR Current", "Columbia 2017, No CWR", "Columbia 2040 (2017), CWR Current","Columbia 2040 (2017), No CWR"),row.names=FALSE, caption="Table 1. Percent of population with cumulative degree days (>22°C) above 135 across different HexSim thermalscapes summarized for Grande Ronde River summer steelhead.", digits=0)
library(readr)
E13 <- read_csv("D:/Results_4Populations/gr_Columbia2017A/combined/E13.csv")
View(E13)
library(readr)
psg_timing_gr_keefer <- read_csv("D:/HexSim_Models/CWR_Columbia/Calibration/MKeefer_data/psg_timing_gr_keefer.csv")
View(psg_timing_gr_keefer)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
modeled<-read_csv("D:/Results_4Populations/gr_Columbia2017A/combined/E13.csv")
names(modeled)
names(modeled)<-c("Run", "Step", "Population", "ID", "Time_entry", "Time_exit", "Time_in_system", "Time_remaining",
"Time_in_cwr_total_h", "Initial_weight", "Initial_ED", "Fitness_weight", "Fitness_ED", "Fitness_energy")
names(psg_timing_gr_keefer)
gr_keefer<-read_csv("D:/HexSim_Models/CWR_Columbia/Calibration/MKeefer_data/psg_timing_gr_keefer.csv")
names(gr_keefer)
names<-c("Year", "bodate", "bo_jul", "mndate", "ihdate", "ih_jul", "grdate", "bo_mn_d", "bo_ih_d", "ih_gr_d")
# rename columns
names(gr_keefer)<-c("Year", "bodate", "bo_jul", "mndate", "ihdate", "ih_jul", "grdate", "bo_mn_d", "bo_ih_d", "ih_gr_d")
psg_timing_gr_keefer <- read_csv("D:/HexSim_Models/CWR_Columbia/Calibration/MKeefer_data/psg_timing_gr_keefer.csv",
col_types = cols(bodate = col_date(format = "%m/%d/%Y"),
grdate = col_date(format = "%m/%d/%Y"),
ihdate = col_date(format = "%m/%d/%Y"),
mndate = col_date(format = "%m/%d/%Y")))
names(psg_timing_gr_keefer)<-c("Year", "bodate", "BO_jul", "mndate", "ihdate", "ih_jul", "grdate", "bo_mn_d", "bo_ih_d", "ih_gr_d")
gr_keefer <- read_csv("D:/HexSim_Models/CWR_Columbia/Calibration/MKeefer_data/psg_timing_gr_keefer.csv",
col_types = cols(bodate = col_date(format = "%m/%d/%Y"),
grdate = col_date(format = "%m/%d/%Y"),
ihdate = col_date(format = "%m/%d/%Y"),
mndate = col_date(format = "%m/%d/%Y")))
names(gr_keefer)<-c("Year", "bodate", "BO_jul", "mndate", "ihdate", "ih_jul", "grdate", "bo_mn_d", "bo_ih_d", "ih_gr_d")
head(gr_keefer)
f <- ggplot(data = gr_keefer, aes(x = bodate)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead") +  scale_x_datetime(limits = ymd_hms(c("2019-06-01", "2020-04-20")))
library(ggplot2)
f <- ggplot(data = gr_keefer, aes(x = bodate)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead") +  scale_x_datetime(limits = ymd_hms(c("2019-06-01", "2020-04-20")))
library(lubridate)
f <- ggplot(data = gr_keefer, aes(x = bodate)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead") +  scale_x_datetime(limits = ymd_hms(c("2019-06-01", "2020-04-20")))
f <- ggplot(data = gr_keefer, aes(x = bodate)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead")
f
f <- ggplot(data = gr_keefer, aes(x = BO_jul)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead")
f
gr_keefer2015<-filter(gr_keefer, Year ==2015)
names(gr_keefer)<-c("Year", "bodate", "BO_jul", "mndate", "ihdate", "ih_jul", "grdate", "bo_mn_d", "bo_ih_d", "ih_gr_d")
head(gr_keefer)
gr_keefer2015<-filter(gr_keefer, Year == 2015)
gr_keefer2015<-dplyr::filter(gr_keefer, Year == 2015)
f2015 <- ggplot(data = gr_keefer2015, aes(x = BO_jul)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead")
f2015
f <- ggplot(data = gr_keefer, aes(x = BO_jul)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead")
f + facet_grid(Year ~ .)
bins
bins
f <- ggplot(data = gr_keefer, aes(x = BO_jul)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead") +
xlim(150,300)
f + facet_grid(Year ~ .)
f <- ggplot(data = gr_keefer, aes(x = BO_jul)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead") +
xlim(180,300)
f + facet_grid(Year ~ .)
f <- ggplot(data = gr_keefer, aes(x = BO_jul)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead") +
xlim(180,300)
f + facet_grid(Year ~ ., scales="free_y")
f <- ggplot(data = gr_keefer, aes(x = BO_jul)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead") +
xlim(180,300) +
theme_dark()
f + facet_grid(Year ~ ., scales="free_y")
f <- ggplot(data = gr_keefer, aes(x = BO_jul)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead") +
xlim(180,300) +
theme_classic()
f + facet_grid(Year ~ ., scales="free_y")
f <- ggplot(data = gr_keefer, aes(x = BO_jul)) + geom_histogram(bins=90)  + labs(x="Observed Passage date (Bonneville Dam)", title="Grande Ronde River Summer Steelhead -Pit tag data") +
xlim(180,300) +
theme_classic()
f + facet_grid(Year ~ ., scales="free_y")
# convert Step to julian day
modeled$step_jday<-floor(modeled$Step / 24) + jday_start
# convert julian day to date
modeled$step_date_ch<-chron(modeled$step_jday, origin=c(month=1, day=1, year=2019))
# convert date format to posixct
modeled$step_date<- as.POSIXct(modeled$step_date_ch, "GMT")
# convert Step to julian day
jday_start<-182
modeled$step_jday<-floor(modeled$Step / 24) + jday_start
# convert julian day to date
modeled$step_date_ch<-chron(modeled$step_jday, origin=c(month=1, day=1, year=2019))
head(modeled)
g <- ggplot(data = modeled, aes(x = step_jday)) + geom_histogram(bins=90)  + labs(x="Observed Bonneville Passage (Julian day)", title="Grande Ronde River Summer Steelhead -model data") +
xlim(180,300) +
theme_classic()
g
# libraries
library(tidyverse)
#### Tom's laptop ####
if(Sys.info()[4]=="LZ2626UTPURUCKE"){
datadir<-path.expand("c:/git/PIP/GCMS_data_XCMS/") # path to git repo
}
# Tom's linux
if(Sys.info()[4]=="d2626ut7920d.rtpnc.epa.gov"){
datadir<-path.expand("~/git/PIP/GCMS_data_XCMS/") # path to git repo
}
# Marcia's epa computer -> WORKS
if(Sys.info()[4]=="LZ2626XMSNYDE02"){
datadir<-path.expand("D:/git_repo/PIP/GCMS_data_XCMS/") # path to git repo
}
setwd(datadir)
#### read in auto-scaled xcms aligned data ####
# output from Analysis_101119.RMD #
# set up file names
liver1_class_filename <- paste0(datadir,"WorkDir_liver1/Preprocessing_Data_a/class.csv")
liver1_processedtable_filename <- paste0(datadir,"WorkDir_liver1/Preprocessing_Data_a/ProcessedTable.csv")
# read in data using filenames
liver_a<-read.csv(liver1_processedtable_filename)
liver_a_class<-read.csv(liver1_class_filename)
# combine class with data
liver<-cbind(liver_a,liver_a_class[2] )
# sort by class
liver_o<-liver[order(liver$V1),]
#### data prep for comparing values ####
# create DF for each treatment of scaled peaks
liver_t1<-dplyr::filter(liver_o, V1 == 1)
liver_t2<-dplyr::filter(liver_o, V1 == 2)
liver_t3<-dplyr::filter(liver_o, V1 == 3)
liver_t4<-dplyr::filter(liver_o, V1 == 4)
# drop non-numeric columns
liver_t1<-dplyr::select(liver_t1, -X, -V1)
liver_t2<-dplyr::select(liver_t2, -X, -V1)
liver_t3<-dplyr::select(liver_t3, -X, -V1)
liver_t4<-dplyr::select(liver_t4, -X, -V1)
#### get control means for peaks and compare to each treatment ####
# get mean value of each peak across all control treatments
liver_t1_mean<-colMeans(liver_t1)
# each treatment minus the control means
# control - treatment 2
# create empty DF from column names from original
diff1<-liver_t2[FALSE,]
for (i in 1:nrow(liver_t2)){
temp<-liver_t2[i,] - liver_t1_mean
diff1[i,]<-temp
}
# control - treatment 3
# create empty DF from column names from original
diff2<-liver_t3[FALSE,]
for (i in 1:nrow(liver_t3)){
temp<-liver_t3[i,] - liver_t1_mean
diff2[i,]<-temp
}
# control - treatment 4
# create empty DF from column names from original
diff3<-liver_t4[FALSE,]
for (i in 1:nrow(liver_t4)){
temp<-liver_t4[i,] - liver_t1_mean
diff3[i,]<-temp
}
# plot difference histograms
par(mfrow=c(3,1))
par(mar = c(4, 4, 1, 4))
hist(colMeans(abs(diff1)), xlab="Difference (Pesticide - Control)", main="", col="red")
hist(colMeans(abs(diff2)), xlab="Difference (Bullfrog - Control)", main="", col="blue")
hist(colMeans(abs(diff3)), xlab="Difference (Pesticide & Bullfrog - Control)", main="", col="purple")
###
## pesticide only
# take absolute value of difference first
test1<-as.data.frame(colMeans(abs(diff1)))
names(test1)<-"peak_value"
#test1$V2<-abs(test1$peak_value)
# create column for peak no
peak_no<-seq(1,1584, 1)
test1_no<-cbind(test1, peak_no)
# drop peaks
threshold<-0.90
test1_f<-filter(test1_no, test1 > threshold)
# check to see ~20% dropped
dim(test1_f)[1] / dim(test1)[1]
###
## bullfrog only
test2<-as.data.frame(colMeans(abs(diff2)))
names(test2)<-"peak_value"
#test1$V2<-abs(test1$peak_value)
# create column for peak no
peak_no<-seq(1,1584, 1)
test2_no<-cbind(test2, peak_no)
# drop peaks
threshold<-0.56
test2_f<-filter(test2_no, test2 > threshold)
# check to see ~20% dropped
dim(test2_f)[1] / dim(test2)[1]
###
## pesticide and bullfrog
test3<-as.data.frame(colMeans(abs(diff2)))
names(test3)<-"peak_value"
#test1$V2<-abs(test1$peak_value)
# create column for peak no
peak_no<-seq(1,1584, 1)
test3_no<-cbind(test3, peak_no)
# drop peaks
threshold<-0.56
test3_f<-filter(test3_no, test3 > threshold)
# check to see ~20% dropped
dim(test3_f)[1] / dim(test3)[1]
###################################
#### import in SVM-RFE ranked peaks ####
rfe_pest<-read.csv(paste0(datadir, "output/RFE_ctrlvspest.csv"))
rfe_frog<-read.csv(paste0(datadir,"output/RFE_ctrlvbullfrog.csv"))
rfe_combined<-read.csv(paste0(datadir,"output/RFE_ctrlvpest_and_bullfrog_allbins.csv"))
#### import ranked and identified list for each treatment ####
rfeid_pest<-read.csv(paste0(datadir, "output/pest_metabolite_id_all_treatments_combined_wmh_final_110119.csv"))
rfeid_combined<-read.csv(paste0(datadir,"output/combined_metabolite_id_all_treatments_combined_wmh_final_110119.csv"))
rfeid_frog<-read.csv(paste0(datadir,"output/bullfrog_metabolite_id_all_treatments_combined_wmh_final_110119.csv"))
## PEST
# drop first 2 rows
rfe_pest<-rfe_pest[-1:-2,]
# drop all columns except the peak time and the rank
rfe_pest<-rfe_pest[,1:2]
# add peak_no column for join
peak_no<-seq(1,1585, 1)
rfe_pest2<-cbind(rfe_pest, peak_no)
## FROG
# drop first 2 rows
rfe_frog<-rfe_frog[-1:-2,]
# drop all columns except the peak time and the rank
rfe_frog<-rfe_frog[,1:2]
# add peak_no column for join
peak_no<-seq(1,1585, 1)
rfe_frog2<-cbind(rfe_frog, peak_no)
## COMBINED
# drop first 2 rows
rfe_combined<-rfe_combined[-1:-2,]
# drop all columns except the peak time and the rank
rfe_combined<-rfe_combined[,1:2]
# add peak_no column for join
peak_no<-seq(1,1585, 1)
rfe_combined2<-cbind(rfe_combined, peak_no)
View(rfe_pest2)
View(rfe_frog2)
View(rfe_combined2)
pest.m<-merge(test1_f, rfe_pest2, by.x="peak_no", by.y="peak_no")
pest.f<-filter(pest.m, featureRankedList4join2 < 100)
dim(pest.f) # 73 of 100 ranked peaks remaining
# frog #
frog.m<-merge(test2_f, rfe_frog2, by.x="peak_no", by.y="peak_no")
frog.f<-filter(frog.m, featureRankedList4join2 < 100)
dim(frog.f) # 74 of 100 ranked peaks remaining
# combined #
combined.m<-merge(test3_f, rfe_combined2, by.x="peak_no", by.y="peak_no")
combined.f<-filter(combined.m, featureRankedList4join2 < 100)
dim(combined.f) # 75 of 100 ranked peaks remaining
#### merge with identified peak list from Matthew ####
# pest #
rfeid_pest_sub<-merge(rfeid_pest, pest.f,by.x="RT",by.y="X")
View(rfeid_pest_sub)
# frog #
rfeid_frog_sub<-merge(rfeid_frog, frog.f,by.x="RT",by.y="X")
View(rfeid_frog_sub)
# combined #
rfeid_combined_sub<-merge(rfeid_combined, combined.f,by.x="RT",by.y="X")
View(rfeid_combined_sub)
array1 <- array(data=NA, dim=c(10,1584,10))
for (i in 1:nrow(liver_t1)){
for (j in 1:nrow(liver_t2)){
temp<-liver_t1[i,] - liver_t2[j,]
a<- abs(temp)
array1[i,,j]<-as.matrix(a)
}}
#z <- array(1:20, dim = c(3,4,5))
#dim(z)
#apply(z, MARGIN = c(3), sum)
# add up 1st and 3rd dimensions
sum_out1<-apply(array1, MARGIN=c(2), sum)
## control minus treatment 3
array2 <- array(data=NA, dim=c(10,1584,10))
for (i in 1:nrow(liver_t1)){
for (j in 1:nrow(liver_t3)){
temp<-liver_t1[i,] - liver_t3[j,]
a<- abs(temp)
array2[i,,j]<-as.matrix(a)
}}
# add up 1st and 3rd dimensions
sum_out2<-apply(array2, MARGIN=c(2), sum)
## control minus treatment 4
array3 <- array(data=NA, dim=c(10,1584,10))
for (i in 1:nrow(liver_t1)){
for (j in 1:nrow(liver_t4)){
temp<-liver_t1[i,] - liver_t4[j,]
a<- abs(temp)
array3[i,,j]<-as.matrix(a)
}}
# add up 1st and 3rd dimensions
sum_out3<-apply(array3, MARGIN=c(2), sum)
# combine treatment comparison sums
sum_out_all<-cbind.data.frame(sum_out1, sum_out2, sum_out3)
# plot histograms of total sums for each trtmt comparison
par(mfrow=c(3,1))
par(mar = c(4, 4, 1, 4))
hist(sum_out_all$sum_out1, xlab="Sum Difference (Control - Pesticide)", main="",col="red", xlim=c(0,150))
hist(sum_out_all$sum_out2, xlab="Sum Difference (Control - Bullfrog)", main="",col="blue", xlim=c(0,150))
hist(sum_out_all$sum_out3, xlab="Sum Difference (Control - Pesticide & Bullfrog)", main="", col="purple", xlim=c(0,150))
## control vs pest
# create column for peak no
peak_no<-seq(1,1584, 1)
sumout1_no<-cbind.data.frame(sum_out1, peak_no)
# drop peaks
threshold<-113
sumout1_f<-filter(sumout1_no, sum_out1 > threshold)
# check to see ~20% dropped
dim(sumout1_f)[1] / dim(sumout1_no)[1]
## control vs frog
# create column for peak no
peak_no<-seq(1,1584, 1)
sumout2_no<-cbind.data.frame(sum_out2, peak_no)
# drop peaks
threshold<-82
sumout2_f<-filter(sumout2_no, sum_out2 > threshold)
# check to see ~20% dropped
dim(sumout2_f)[1] / dim(sumout2_no)[1]
## control vs pest plus frog
# create column for peak no
peak_no<-seq(1,1584, 1)
sumout3_no<-cbind.data.frame(sum_out3, peak_no)
# drop peaks
threshold<-76
sumout3_f<-filter(sumout3_no, sum_out3 > threshold)
# check to see ~20% dropped
dim(sumout3_f)[1] / dim(sumout3_no)[1]
pest.m2<-merge(sumout1_f, rfe_pest2, by.x="peak_no", by.y="peak_no")
pest.f2<-filter(pest.m2, featureRankedList4join2 < 100)
dim(pest.f2) # 73 of 100 ranked peaks remaining
# frog #
frog.m2<-merge(sumout1_f, rfe_frog2, by.x="peak_no", by.y="peak_no")
frog.f2<-filter(frog.m2, featureRankedList4join2 < 100)
dim(frog.f2) # 74 of 100 ranked peaks remaining
# combined #
combined.m2<-merge(sumout1_f, rfe_combined2, by.x="peak_no", by.y="peak_no")
combined.f2<-filter(combined.m2, featureRankedList4join2 < 100)
dim(combined.f2) # 75 of 100 ranked peaks remaining
#### merge with identified peak list from Matthew ####
# pest #
rfeid_pest_sub2<-merge(rfeid_pest, pest.f2,by.x="RT",by.y="X")
View(rfeid_pest_sub2)
# frog #
rfeid_frog_sub2<-merge(rfeid_frog, frog.f2,by.x="RT",by.y="X")
View(rfeid_frog_sub2)
# combined #
rfeid_combined_sub2<-merge(rfeid_combined, combined.f2,by.x="RT",by.y="X")
View(rfeid_combined_sub2)
# write out combined CSV
write.csv(rfeid_pest_sub2, paste0(datadir, "output/rfeid_pest_sub2.csv"))
write.csv(rfeid_frog_sub2, paste0(datadir, "output/rfeid_frog_sub2.csv"))
write.csv(rfeid_combined_sub2, paste0(datadir, "output/rfeid_combined_sub2.csv"))
