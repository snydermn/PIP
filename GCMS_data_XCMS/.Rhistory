psg_timing_gr_keefer$mc_date_ch<-chron(psg_timing_gr_keefer$mc_jul, origin=c(month=1, day=1, year=2019))
# convert date format to posixct
psg_timing_gr_keefer$mc_date_4_plot<- as.POSIXct(psg_timing_gr_keefer$mc_date_ch, "GMT")
f <- ggplot(data = psg_timing_gr_keefer, aes(x = mc_date_4_plot)) + geom_histogram()  + labs(x="Observed Passage date (McNary Dam)") +  scale_x_datetime(limits = ymd_hms(c("2019-06-01 17:00:00", "2020-04-20 17:00:00")))
f
all_13_labels_current<-filter( all_13_labels, scenario == "Columbia Current, CWR Current" )
# histograms
z <- ggplot(data = all_13_labels_current, aes(x = date)) + geom_histogram() + labs(x="Modeled Passage Day (Snake River confluence)", y="Count", title="Grande Ronde River Summer Steelhead") + scale_x_datetime(limits = ymd_hms(c("2019-06-01 17:00:00", "2020-04-20 17:00:00")))
z
plot_grid(f,z,
labels = c("A", "B"),
ncol = 1, nrow = 2)
plot_grid(f,z,
labels = c("A", "B"),
ncol = 1, nrow = 2)
z
plot_grid(f,z,
labels = c("A", "B"),
ncol = 1, nrow = 2)
all_13_labels_current<-filter( all_13_labels, scenario == "Columbia Current, CWR Current" )
# histograms
z <- ggplot(data = all_13_labels_current, aes(x = date)) + geom_histogram() + labs(x="Modeled Passage Date (Snake River confluence)", y="Count", title="Grande Ronde River Summer Steelhead") + scale_x_datetime(limits = ymd_hms(c("2019-06-01 17:00:00", "2020-04-20 17:00:00")))
z
plot_grid(f,z,
labels = c("A", "B"),
ncol = 1, nrow = 2)
# create julian date for mcnary
psg_timing_gr_keefer$mc_jul<-psg_timing_gr_keefer$BO_jul + psg_timing_gr_keefer$bo_mn_d
# convert julian day to date
psg_timing_gr_keefer$mc_date_ch<-chron(psg_timing_gr_keefer$mc_jul, origin=c(month=1, day=1, year=2019))
# convert date format to posixct
psg_timing_gr_keefer$mc_date_4_plot<- as.POSIXct(psg_timing_gr_keefer$mc_date_ch, "GMT")
f <- ggplot(data = psg_timing_gr_keefer, aes(x = mc_date_4_plot)) + geom_histogram()  + labs(x="Observed Passage date (McNary Dam)", title="Grande Ronde River Summer Steelhead") +  scale_x_datetime(limits = ymd_hms(c("2019-06-01 17:00:00", "2020-04-20 17:00:00")))
f
all_13_labels_current<-filter( all_13_labels, scenario == "Columbia Current, CWR Current" )
# histograms
z <- ggplot(data = all_13_labels_current, aes(x = date)) + geom_histogram() + labs(x="Modeled Passage Date (Snake River confluence)", y="Count") + scale_x_datetime(limits = ymd_hms(c("2019-06-01 17:00:00", "2020-04-20 17:00:00")))
z
plot_grid(f,z,
labels = c("A", "B"),
ncol = 1, nrow = 2)
all_13$Time_in_system_d<-all_13$Time_in_system / 24
all_13_labels<-all_13
# vector of scenario labels
all_13_labels$scenario<-as.factor(all_13_labels$scenario)
levels(all_13_labels$scenario)[levels(all_13_labels$scenario)=="A"] <-"Columbia 2017, CWR Current"
levels(all_13_labels$scenario)[levels(all_13_labels$scenario)=="B"] <-"Columbia 2017, No CWR"
levels(all_13_labels$scenario)[levels(all_13_labels$scenario)=="C"] <-"Columbia 2040 (2017), CWR Current"
levels(all_13_labels$scenario)[levels(all_13_labels$scenario)=="D"] <-"Columbia 2040 (2017), No CWR"
#v_names<-c("Columbia 2040- CWR Current", "Columbia Restored- CWR Current","Columbia Current- CWR Current", "Columbia #Current- CWR Restored", "Columbia 2040- No CWRs", "Columbia Restored- No CWRs","Columbia Current- No CWRs" )
p <- ggplot(data = all_13_labels, aes(x = Time_in_system_d)) + geom_histogram(binwidth = 5)
p + facet_wrap(~scenario) + labs(x="Passage time (d)", y="Count", title="Grande Ronde River Summer Steelhead")
# model starts on July 1 which is equivalent to julian day 182
jday_start<-182
# step is hour arrived at terminus
# convert Step to julian day
all_13_labels$terminus_jday<-floor(all_13_labels$Step / 24) + jday_start
# convert julian day to date
all_13_labels$terminus_date_ch<-chron(all_13_labels$terminus_jday, origin=c(month=1, day=1, year=2019))
# convert date format to posixct
all_13_labels$terminus_date<- as.POSIXct(all_13_labels$terminus_date_ch, "GMT")
# Time_entry is hour started from Bonneville
# convert Step to julian day
all_13_labels$entry_jday<-floor(all_13_labels$Time_entry / 24) + jday_start
# convert julian day to date
all_13_labels$entry_date_ch<-chron(all_13_labels$entry_jday, origin=c(month=1, day=1, year=2019))
# convert date format to posixct
all_13_labels$entry_date<- as.POSIXct(all_13_labels$entry_date_ch, "GMT")
# histograms
p <- ggplot(data = all_13_labels, aes(x = terminus_date)) + geom_histogram()
p + facet_wrap(~scenario) + labs(x="Exit Day", y="Count", title="Grande Ronde River Summer Steelhead")
library(tidyverse)
#### set up directory structure ####
# to run script on different computers specify sys.info()[4] and
# specify path to model results folder and
# folder containing look up tables
#### class and treatment key ####
# 1 = control
# 2 = pesticide
# 3 = bullfrog
# 4 = pesticide + bullfrog
#### Tom's laptop ####
if(Sys.info()[4]=="LZ2626UTPURUCKE"){
datadir<-path.expand("c:/git/PIP/GCMS_data_XCMS/") # path to git repo
}
# Tom's linux
if(Sys.info()[4]=="d2626ut7920d.rtpnc.epa.gov"){
datadir<-path.expand("~/git/PIP/GCMS_data_XCMS/") # path to git repo
}
# Marcia's epa computer -> WORKS
if(Sys.info()[4]=="LZ2626XMSNYDE02"){
datadir<-path.expand("D:/git_repo/PIP/GCMS_data_XCMS/") # path to git repo
}
setwd(datadir)
#### read in auto-scaled xcms aligned data ####
# output from Analysis_101119.RMD #
# set up file names
liver1_class_filename <- paste0(datadir,"WorkDir_liver1/Preprocessing_Data_a/class.csv")
liver1_processedtable_filename <- paste0(datadir,"WorkDir_liver1/Preprocessing_Data_a/ProcessedTable.csv")
# read in data using filenames
liver_a<-read.csv(liver1_processedtable_filename)
liver_a_class<-read.csv(liver1_class_filename)
# combine class with data
liver<-cbind(liver_a,liver_a_class[2] )
# sort by class
liver_o<-liver[order(liver$V1),]
#### data prep for comparing values ####
# create DF for each treatment of scaled peaks
liver_t1<-dplyr::filter(liver_o, V1 == 1)
liver_t2<-dplyr::filter(liver_o, V1 == 2)
liver_t3<-dplyr::filter(liver_o, V1 == 3)
liver_t4<-dplyr::filter(liver_o, V1 == 4)
# drop non-numeric columns
liver_t1<-dplyr::select(liver_t1, -X, -V1)
liver_t2<-dplyr::select(liver_t2, -X, -V1)
liver_t3<-dplyr::select(liver_t3, -X, -V1)
liver_t4<-dplyr::select(liver_t4, -X, -V1)
#### get control means for peaks and compare to each treatment ####
# get mean value of each peak across all control treatments
liver_t1_mean<-colMeans(liver_t1)
# each treatment minus the control means
# control - treatment 2
# create empty DF from column names from original
diff1<-liver_t2[FALSE,]
for (i in 1:nrow(liver_t2)){
temp<-liver_t2[i,] - liver_t1_mean
diff1[i,]<-temp
}
View(diff1)
###
## pesticide only
test1<-as.data.frame(colMeans(diff1))
names(test1)<-"peak_value"
test1$V2<-abs(test1$peak_value)
# create column for peak no
peak_no<-seq(1,1584, 1)
test1_no<-cbind(test1, peak_no)
head(test1_no)
hist(test1$V2)
# drop peaks
threshold<-0.5
test1_f<-filter(test1_no, V2 > threshold)
length(test1_f)
dim(test1_f)
dim(test1_no)
# drop peaks
threshold<-0.2
test1_f<-filter(test1_no, V2 > threshold)
dim(test1_f)
1281/1584
###
## bullfrog only
test2<-as.data.frame(colMeans(diff1))
names(test2)<-"peak_value"
test2$V2<-abs(test2$peak_value)
# create column for peak no
peak_no<-seq(1,1584, 1)
test2_no<-cbind(test2, peak_no)
hist(colMeans(diff2), xlab="Difference (Bullfrog - Control)", main="", col="blue")
# control - treatment 3
# create empty DF from column names from original
diff2<-liver_t3[FALSE,]
for (i in 1:nrow(liver_t3)){
temp<-liver_t3[i,] - liver_t1_mean
diff2[i,]<-temp
}
# control - treatment 4
# create empty DF from column names from original
diff3<-liver_t4[FALSE,]
for (i in 1:nrow(liver_t4)){
temp<-liver_t4[i,] - liver_t1_mean
diff3[i,]<-temp
}
# plot difference histograms
par(mfrow=c(3,1))
par(mar = c(4, 4, 1, 4))
hist(colMeans(diff1), xlab="Difference (Pesticide - Control)", main="", col="red")
hist(colMeans(diff2), xlab="Difference (Bullfrog - Control)", main="", col="blue")
hist(colMeans(diff3), xlab="Difference (Pesticide & Bullfrog - Control)", main="", col="purple")
###
## bullfrog only
test2<-as.data.frame(colMeans(diff2))
names(test2)<-"peak_value"
test2$V2<-abs(test2$peak_value)
# create column for peak no
peak_no<-seq(1,1584, 1)
test2_no<-cbind(test2, peak_no)
hist(liver_t1_mean)
hist(liver_t1)
View(liver_t1)
diff1<-liver_t2[FALSE,]
for (i in 1:nrow(liver_t2)){
temp<-liver_t2[i,] - liver_t1_mean
diff1[i,]<-temp
}
# control - treatment 3
# create empty DF from column names from original
diff2<-liver_t3[FALSE,]
for (i in 1:nrow(liver_t3)){
temp<-liver_t3[i,] - liver_t1_mean
diff2[i,]<-temp
}
# control - treatment 4
# create empty DF from column names from original
diff3<-liver_t4[FALSE,]
for (i in 1:nrow(liver_t4)){
temp<-liver_t4[i,] - liver_t1_mean
diff3[i,]<-temp
}
###
## pesticide only
# take absolute value of difference first?
test1<-as.data.frame(colMeans(abs(diff1)))
names(test1)<-"peak_value"
head(test1)
#test1$V2<-abs(test1$peak_value)
# create column for peak no
peak_no<-seq(1,1584, 1)
test1_no<-cbind(test1, peak_no)
hist(test1_no$peak_value)
# drop peaks
threshold<-1.0
test1_f<-filter(test1_no, V2 > threshold)
test1_f<-filter(test1_no, test1 > threshold)
dim(test1_f)
dim(test1)
1007/1584
# drop peaks
threshold<-0.75
test1_f<-filter(test1_no, test1 > threshold)
dim(test1_f)[1] / dim(test1)[1]
# drop peaks
threshold<-0.85
test1_f<-filter(test1_no, test1 > threshold)
dim(test1_f)[1] / dim(test1)[1]
# drop peaks
threshold<-0.90
test1_f<-filter(test1_no, test1 > threshold)
dim(test1_f)[1] / dim(test1)[1]
###
## bullfrog only
test2<-as.data.frame(colMeans(abs(diff2)))
names(test2)<-"peak_value"
#test1$V2<-abs(test1$peak_value)
# create column for peak no
peak_no<-seq(1,1584, 1)
test2_no<-cbind(test2, peak_no)
# drop peaks
threshold<-0.90
test2_f<-filter(test2_no, test2 > threshold)
dim(test2_f)[1] / dim(test2)[1]
# drop peaks
threshold<-0.40
test2_f<-filter(test2_no, test2 > threshold)
dim(test2_f)[1] / dim(test2)[1]
# drop peaks
threshold<-0.60
test2_f<-filter(test2_no, test2 > threshold)
dim(test2_f)[1] / dim(test2)[1]
# drop peaks
threshold<-0.550
test2_f<-filter(test2_no, test2 > threshold)
dim(test2_f)[1] / dim(test2)[1]
# drop peaks
threshold<-0.50
test2_f<-filter(test2_no, test2 > threshold)
dim(test2_f)[1] / dim(test2)[1]
# drop peaks
threshold<-0.57
test2_f<-filter(test2_no, test2 > threshold)
dim(test2_f)[1] / dim(test2)[1]
# drop peaks
threshold<-0.56
test2_f<-filter(test2_no, test2 > threshold)
dim(test2_f)[1] / dim(test2)[1]
###
## pesticide and bullfrog
test3<-as.data.frame(colMeans(abs(diff2)))
names(test3)<-"peak_value"
#test1$V2<-abs(test1$peak_value)
# create column for peak no
peak_no<-seq(1,1584, 1)
test3_no<-cbind(test3, peak_no)
# drop peaks
threshold<-0.56
test3_f<-filter(test3_no, test3 > threshold)
dim(test3_f)[1] / dim(test3)[1]
par(mfrow=c(3,1))
par(mar = c(4, 4, 1, 4))
hist(colMeans(abs(diff1)), xlab="Difference (Pesticide - Control)", main="", col="red")
hist(colMeans(abs(diff2)), xlab="Difference (Bullfrog - Control)", main="", col="blue")
hist(colMeans(abs(diff3)), xlab="Difference (Pesticide & Bullfrog - Control)", main="", col="purple")
test3_f
dim(test3_f)
#### subset columns based on column means abs(difference) > X ####
rfe_pest<-paste0(datadir, "/output/RFE_ctrlvspest.csv")
#### subset columns based on column means abs(difference) > X ####
rfe_pest<-paste0(datadir, "/output/RFE_ctrlvspest.csv")
rfe_frog<-paste0(datadir,"/output/RFE_ctrlvbullfrog.csv")
rfe_combined<-paste0(datadir,"/output/RFE_ctrlvpest_and_bullfrog_allbins.csv")
View(rfe_pest)
#### subset columns based on column means abs(difference) > X ####
rfe_pest<-paste0(datadir, "output/RFE_ctrlvspest.csv")
rfe_frog<-paste0(datadir,"output/RFE_ctrlvbullfrog.csv")
rfe_combined<-paste0(datadir,"output/RFE_ctrlvpest_and_bullfrog_allbins.csv")
rfe_pest
#### subset columns based on column means abs(difference) > X ####
rfe_pest<-read.csv(paste0(datadir, "output/RFE_ctrlvspest.csv"))
rfe_pest
rfe_frog<-read.csv(paste0(datadir,"output/RFE_ctrlvbullfrog.csv"))
rfe_combined<-read.csv(paste0(datadir,"output/RFE_ctrlvpest_and_bullfrog_allbins.csv"))
View(rfe_frog)
View(rfe_combined)
# format SVM-RFE ranked peaks
# drop first row
test<-rfe_pest[-1,]
View(test)
# format SVM-RFE ranked peaks
# drop first row
test<-rfe_pest[-1:-2,]
View(test)
dim(test)
# format SVM-RFE ranked peaks
# drop first 2 rows
rfe_pest<-rfe_pest[-1:-2,]
# drop all columns except the peak time and the rank
test<-rfe_pest[,1:2]
View(test)
View(test1_f)
dim(test1_f)
View(rfe_pest2)
rfe_pest2<-cbind(rfe_pest, peak_no)
dim(rfe_pest)
# add peak_no column for join
peak_no<-seq(1,1585, 1)
rfe_pest2<-cbind(rfe_pest, peak_no)
View(rfe_pest2)
# format SVM-RFE ranked peaks
# drop first 2 rows
rfe_pest<-rfe_pest[-1:-2,]
# drop all columns except the peak time and the rank
rfe_pest<-rfe_pest[,1:2]
View(rfe_pest)
rfe_pest2<-cbind(rfe_pest, peak_no)
###################################
#### import in SVM-RFE ranked peaks ####
rfe_pest<-read.csv(paste0(datadir, "output/RFE_ctrlvspest.csv"))
# format SVM-RFE ranked peaks
# drop first 2 rows
rfe_pest<-rfe_pest[-1:-2,]
# drop all columns except the peak time and the rank
rfe_pest<-rfe_pest[,1:2]
# add peak_no column for join
peak_no<-seq(1,1585, 1)
rfe_pest2<-cbind(rfe_pest, peak_no)
View(rfe_pest2)
## merge with mean filtered peak list
merge(test1_f, rfe_pest2, by.x="peak_no", by.y="peak_no")
## merge with mean filtered peak list
View(merge(test1_f, rfe_pest2, by.x="peak_no", by.y="peak_no"))
## merge with mean filtered peak list
pest.m<-merge(test1_f, rfe_pest2, by.x="peak_no", by.y="peak_no")
names(pest.m)
dim(filter(pest.m, featureRankedList4join2 < 100))
rfe_frog<-rfe_frog[-1:-2,]
# drop all columns except the peak time and the rank
rfe_frog<-rfe_frog[,1:2]
# add peak_no column for join
peak_no<-seq(1,1585, 1)
rfe_frog2<-cbind(rfe_frog, peak_no)
## COMBINED
# drop first 2 rows
rfe_combined<-rfe_combined[-1:-2,]
# drop all columns except the peak time and the rank
rfe_combined<-rfe_combined[,1:2]
# add peak_no column for join
peak_no<-seq(1,1585, 1)
rfe_combined2<-cbind(rfe_combined, peak_no)
View(rfe_frog2)
View(rfe_combined2)
# frog #
frog.m<-merge(test2_f, rfe_frog2, by.x="peak_no", by.y="peak_no")
dim(filter(frog.m, featureRankedList4join2 < 100))
# combined #
combined.m<-merge(test3_f, rfe_combined2, by.x="peak_no", by.y="peak_no")
dim(filter(combined.m, featureRankedList4join2 < 100))
#################################################
#### merge with mean filtered peak list ####
# pest #
pest.m<-merge(test1_f, rfe_pest2, by.x="peak_no", by.y="peak_no")
dim(filter(pest.m, featureRankedList4join2 < 100))
pest.m<-merge(test1_f, rfe_pest2, by.x="peak_no", by.y="peak_no")
pest.f<-filter(pest.m, featureRankedList4join2 < 100)
# frog #
frog.m<-merge(test2_f, rfe_frog2, by.x="peak_no", by.y="peak_no")
frog.f<-filter(frog.m, featureRankedList4join2 < 100)
# combined #
combined.m<-merge(test3_f, rfe_combined2, by.x="peak_no", by.y="peak_no")
combined.f<-filter(combined.m, featureRankedList4join2 < 100)
#### import ranked and identified list for each treatment ####
rfeid_pest<-read.csv(paste0(datadir, "output/pest_metabolite_id_all_treatments_combined_wmh_final_110119.csv"))
rfeid_frog<-read.csv(paste0(datadir,"output/combined_metabolite_id_all_treatments_combined_wmh_final_110119.csv"))
rfeid_combined<-read.csv(paste0(datadir,"output/bullfrog_metabolite_id_all_treatments_combined_wmh_final_110119.csv"))
View(pest.f)
View(rfeid_pest)
#### merge with identified peak list from Matthew ####
# pest #
merge(rfeid_pest, pest.f,by.x="RT",by.y="X")
#### merge with identified peak list from Matthew ####
# pest #
rfeid_pest_sub<-merge(rfeid_pest, pest.f,by.x="RT",by.y="X")
View(rfeid_pest_sub)
unique(rfeid_pest$metabolite.id)
unique(rfeid_pest_sub$metabolite.id)
?write.csv
# write out combined CSV
write.csv(rfeid_pest_sub, paste0(datadir, "output/rfeid_pest_sub.csv"))
write.csv(rfeid_frog_sub, paste0(datadir, "output/rfeid_frog_sub.csv"))
write.csv(rfeid_combined_sub, paste0(datadir, "output/rfeid_combined_sub.csv"))
# frog #
rfeid_frog_sub<-merge(rfeid_frog, pest.f,by.x="RT",by.y="X")
View(rfeid_frog_sub)
# combined #
rfeid_combined_sub<-merge(rfeid_combined, pest.f,by.x="RT",by.y="X")
View(rfeid_combined_sub)
# frog #
rfeid_frog_sub<-merge(rfeid_frog, frog.f,by.x="RT",by.y="X")
View(rfeid_frog_sub)
# combined #
rfeid_combined_sub<-merge(rfeid_combined, combined.f,by.x="RT",by.y="X")
View(rfeid_combined_sub)
# write out combined CSV
write.csv(rfeid_pest_sub, paste0(datadir, "output/rfeid_pest_sub.csv"))
write.csv(rfeid_frog_sub, paste0(datadir, "output/rfeid_frog_sub.csv"))
write.csv(rfeid_combined_sub, paste0(datadir, "output/rfeid_combined_sub.csv"))
dim(pest.f)
dim(frog.f)
dim(combined.f)
View(pest.f)
# frog #
frog.m<-merge(test2_f, rfe_frog2, by.x="peak_no", by.y="peak_no")
frog.f<-filter(frog.m, featureRankedList4join2 < 100)
dim(frog.f) # 75 of 100 ranked peaks remaining
# frog #
rfeid_frog_sub<-merge(rfeid_frog, frog.f,by.x="RT",by.y="X")
View(rfeid_frog_sub)
write.csv(rfeid_frog_sub, paste0(datadir, "output/rfeid_frog_sub.csv"))
rfeid_combined<-read.csv(paste0(datadir,"output/combined_metabolite_id_all_treatments_combined_wmh_final_110119.csv"))
rfeid_frog<-read.csv(paste0(datadir,"output/bullfrog_metabolite_id_all_treatments_combined_wmh_final_110119.csv"))
## FROG
# drop first 2 rows
rfe_frog<-rfe_frog[-1:-2,]
# drop all columns except the peak time and the rank
rfe_frog<-rfe_frog[,1:2]
# add peak_no column for join
peak_no<-seq(1,1585, 1)
rfe_frog2<-cbind(rfe_frog, peak_no)
## COMBINED
# drop first 2 rows
rfe_combined<-rfe_combined[-1:-2,]
# drop all columns except the peak time and the rank
rfe_combined<-rfe_combined[,1:2]
# add peak_no column for join
peak_no<-seq(1,1585, 1)
rfe_combined2<-cbind(rfe_combined, peak_no)
rfe_frog<-read.csv(paste0(datadir,"output/RFE_ctrlvbullfrog.csv"))
rfe_combined<-read.csv(paste0(datadir,"output/RFE_ctrlvpest_and_bullfrog_allbins.csv"))
#### import ranked and identified list for each treatment ####
rfeid_pest<-read.csv(paste0(datadir, "output/pest_metabolite_id_all_treatments_combined_wmh_final_110119.csv"))
rfeid_combined<-read.csv(paste0(datadir,"output/combined_metabolite_id_all_treatments_combined_wmh_final_110119.csv"))
rfeid_frog<-read.csv(paste0(datadir,"output/bullfrog_metabolite_id_all_treatments_combined_wmh_final_110119.csv"))
rfe_frog<-rfe_frog[-1:-2,]
# drop all columns except the peak time and the rank
rfe_frog<-rfe_frog[,1:2]
# add peak_no column for join
peak_no<-seq(1,1585, 1)
rfe_frog2<-cbind(rfe_frog, peak_no)
## COMBINED
# drop first 2 rows
rfe_combined<-rfe_combined[-1:-2,]
# drop all columns except the peak time and the rank
rfe_combined<-rfe_combined[,1:2]
# add peak_no column for join
peak_no<-seq(1,1585, 1)
rfe_combined2<-cbind(rfe_combined, peak_no)
pest.m<-merge(test1_f, rfe_pest2, by.x="peak_no", by.y="peak_no")
pest.f<-filter(pest.m, featureRankedList4join2 < 100)
dim(pest.f) # 73 of 100 ranked peaks remaining
# frog #
frog.m<-merge(test2_f, rfe_frog2, by.x="peak_no", by.y="peak_no")
frog.f<-filter(frog.m, featureRankedList4join2 < 100)
dim(frog.f) # 75 of 100 ranked peaks remaining
# combined #
combined.m<-merge(test3_f, rfe_combined2, by.x="peak_no", by.y="peak_no")
combined.f<-filter(combined.m, featureRankedList4join2 < 100)
dim(combined.f) # 74 of 100 ranked peaks remaining
#### merge with identified peak list from Matthew ####
# pest #
rfeid_pest_sub<-merge(rfeid_pest, pest.f,by.x="RT",by.y="X")
View(rfeid_pest_sub)
# frog #
rfeid_frog_sub<-merge(rfeid_frog, frog.f,by.x="RT",by.y="X")
View(rfeid_frog_sub)
# combined #
rfeid_combined_sub<-merge(rfeid_combined, combined.f,by.x="RT",by.y="X")
View(rfeid_combined_sub)
# write out combined CSV
write.csv(rfeid_pest_sub, paste0(datadir, "output/rfeid_pest_sub.csv"))
write.csv(rfeid_frog_sub, paste0(datadir, "output/rfeid_frog_sub.csv"))
write.csv(rfeid_combined_sub, paste0(datadir, "output/rfeid_combined_sub.csv"))
dim(frog.f) # 75 of 100 ranked peaks remaining
dim(combined.f) # 74 of 100 ranked peaks remaining
